<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="EnvDTE80" #>
<#@ assembly name="VSLangProj"#>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ import namespace="VSLangProj" #>
<#@ output extension=".cs" #>
<#@ output encoding="utf-8"#>
<#		  
	// получаем активное рабочее окружение
	var env = GetActiveEnv();
					
	// получаем ссылку на текущий проект
	var project = (EnvDTE.Project)env.Solution.FindProjectItem(Host.TemplateFile).ContainingProject;

	// получаем информацию о пакете	
	//var package = GetPackageInfo(project, env);

	var title = GetProjectProperty(project, "Title", GetProjectProperty(project, "AssemblyName", "Имя сборрки не задано."));
	
	var description = GetProjectProperty(project, "Description");
	if (string.IsNullOrEmpty(description)){
		throw new InvalidOperationException("Ошибка формирования информации о сборке - отсутствует атрибут AssemblyDescription");
	}			

	var dependsOn = GetPredecessors(project, env);		
#>
using System.Reflection;
using System.Runtime.InteropServices;
using Bars.B4.Utils;

<#EnsureAssemblyTitle(project);#>
<#foreach(string predecessor in dependsOn){#>
[assembly: DependsOn("<#=predecessor#>")]
<#}#>

<#+
protected void EnsureAssemblyTitle(EnvDTE.Project project)
{
	var title = GetProjectProperty(project, "Title");
	if (string.IsNullOrEmpty(title)){
		title = GetProjectProperty(project, "AssemblyName", "Имя сборрки не задано.");
		WriteLine("[assembly: AssemblyTitle(\"{0}\")]", title);
	}
}


protected bool HasB4Module(EnvDTE.Project project)
{
	var isB4ModuleProject = false;

	CollectClasses(project.CodeModel.CodeElements, @class => {				
		if (!@class.IsAbstract && IsDerivedFrom(@class, "Bars.B4.IModule")){
			isB4ModuleProject = true;
			return false;
		}
		
		return true;
	});

	return isB4ModuleProject;
}

protected bool IsDerivedFrom(EnvDTE.CodeClass @class, string parent) {
	if(@class.IsDerivedFrom[parent]){
		return true;
	}

	var interfaces = @class.ImplementedInterfaces;
	foreach(EnvDTE.CodeElement @interface in interfaces) {
		if(@interface.FullName == parent){
			return true;
		}
	}

	return false;
}

protected List<EnvDTE.CodeClass> ListClasses(EnvDTE.Project project)
{
	var list = new List<EnvDTE.CodeClass>();

	CollectClasses(project.CodeModel.CodeElements, @class => {list.Add(@class); return true;});

	return list;
}

protected void CollectClasses(CodeElements elements, Predicate<EnvDTE.CodeClass> predicate)
{
	if (elements == null) return;
	foreach(EnvDTE.CodeElement element in elements)
	{
		if (element is EnvDTE.CodeNamespace)
		{
			var objCodeNamespace = (EnvDTE.CodeNamespace)element;
			CollectClasses(objCodeNamespace.Members, predicate);
		}
		else if (element is EnvDTE.CodeClass)
		{
			if (!predicate((EnvDTE.CodeClass)element))
			{
				return;
			}
		}
	}
}

protected EnvDTE.DTE GetActiveEnv()
{
	DTE env = null;
	var provider = Host as IServiceProvider;
	if (provider != null) {
		env = provider.GetService(typeof(DTE)) as DTE;
	}

	if (env == null) {
		throw new InvalidOperationException("Template must be executed from Visual Studio");
	}

	return env;
}

protected string GetProjectProperty(Project project, string property, string defaultValue = "", bool allowEmptyValues = false)
{
	string value = "";
	try
	{
		var p = ((Properties)project.Properties).Item(property);
		value = p == null ? defaultValue : p.Value.ToString();

		if (string.IsNullOrEmpty(value) && !allowEmptyValues)
		{
			value = defaultValue;
		}
	}
	catch
	{
		value = defaultValue;
	}		

	return value;
}

private IList<Project> GetProjects(DTE env)
{
	Projects projects = env.Solution.Projects;
	List<Project> list = new List<Project>();
	var item = projects.GetEnumerator();
	while (item.MoveNext())
	{
		var project = item.Current as Project;
		if (project == null)
		{
			continue;
		}

		if (project.Kind == ProjectKinds.vsProjectKindSolutionFolder)
		{
			list.AddRange(GetSolutionFolderProjects(project));
		}
		else
		{
			list.Add(project);
		}
	}

	return list;
}

private IEnumerable<Project> GetSolutionFolderProjects(Project solutionFolder)
{
	List<Project> list = new List<Project>();
	for (var i = 1; i <= solutionFolder.ProjectItems.Count; i++)
	{
		var subProject = solutionFolder.ProjectItems.Item(i).SubProject;
		if (subProject == null)
		{
			continue;
		}

		// If this is another solution folder, do a recursive call, otherwise add
		if (subProject.Kind == ProjectKinds.vsProjectKindSolutionFolder)
		{
			list.AddRange(GetSolutionFolderProjects(subProject));
		}
		else
		{
			list.Add(subProject);
		}
	}

	return list;
}

protected List<string> GetPredecessors(Project project, DTE env)
{
	var predecessors = new List<string>();

	// собираем список всех проектов солюшена
	//var allProjects = GetProjects(env);

	var vsProject = (VSLangProj.VSProject)project.Object;
		
	var references = new List<string>();	

	foreach(VSLangProj.Reference @ref in vsProject.References)
	{			
		if (@ref.SourceProject != null)
        {
			if (HasB4Module(@ref.SourceProject))
            {
				var name = GetProjectProperty(@ref.SourceProject, "RootNamespace");
				if (!predecessors.Contains(name))
				{
					predecessors.Add(name);				
                }
			}											
		}
		else if (File.Exists(@ref.Path))
		{			
			references.Add(@ref.Path);
		}											
	}
	    
	DirectoryInfo tempDirectory = new DirectoryInfo(Path.Combine(Path.GetTempPath(), Path.GetRandomFileName()));
    tempDirectory.Create();            

	ISet<string> paths = new HashSet<string>();
    string baseDir = AppDomain.CurrentDomain.SetupInformation.ApplicationBase;			
    string cacheDir = Path.GetFullPath(Path.Combine(AppDomain.CurrentDomain.SetupInformation.ApplicationBase, ".cache"));

	foreach(var @ref in references)
	{
		File.Copy(@ref, Path.Combine(tempDirectory.FullName, Path.GetFileName(@ref)));
	}
			
    paths.Add(tempDirectory.FullName);
    paths.Add(Path.GetFullPath(Path.Combine(baseDir, AppDomain.CurrentDomain.BaseDirectory)));
   
	var files = tempDirectory.EnumerateFiles("*.dll");
	foreach (var file in files){		
		try
		{			
			var asm = Assembly.LoadFrom(file.FullName);
			var moduleType = asm.DefinedTypes.FirstOrDefault(x=>!x.IsAbstract && (x.GetInterface("Bars.B4.IModule", true) != null));
			if (moduleType != null)
			{
				if (!predecessors.Contains(moduleType.Namespace))
                {
					predecessors.Add(moduleType.Namespace);
                }
			}			
        }
		catch 
		{			
		}		
	}

		
	return predecessors;
}
#>